# frozen_string_literal: true
require_relative '../../lib/cms_validators'
require_relative '../../lib/encounter_validator'

module UploadsHelper
  def node_type(type)
    NODE_TYPES[type]
  end

  def validator_name(validator)
    VALIDATOR_CATEGORIES[validator.to_sym]
  end

  def validator_slug(validator)
    validator.underscore.tr('/', '_')
  end

  def get_result_value(results, measure, population)
    result_value = results.where('value.measure_id' => measure.hqmf_id).where('value.sub_id' => measure.sub_id)
    result_value.first.value[population].to_i if result_value.first
  end

  def match_errors(upload)
    doc = upload.content
    error_map = {}
    error_attributes = []
    locs = upload.errors.collect { |e| e['location'] }
    locs.compact!

    locs.each do |location|
      # Get rid of some funky stuff generated by schematron
      clean_location = location.gsub("[namespace-uri()='urn:hl7-org:v3']", '')
      node = doc.at_xpath(clean_location)
      next unless node
      elem = node
      if node.class == Nokogiri::XML::Attr
        error_attributes << node
        elem = node.element
      end
      elem = elem.root if node_type(elem.type) == :document
      next unless elem
      elem['error_id'] = UUID.generate.to_s unless elem['error_id']
      error_map[location] = elem['error_id']
    end

    [error_map, error_attributes]
  end
end
